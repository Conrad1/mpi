// GlobalC.cpp: implementation of the GlobalC class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "GlobalC.h"
#include "math.h"
#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "../common.h"
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif




GlobalC::GlobalC()
{
#if ENGLISH
	int FeatBlock[NLETTERS][NUMBER_OF_FEATURES] = 
	{ {1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* A */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0}, /* B */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* C */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* D */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* E */
    {1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* F */
    {1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0}, /* G */
    {1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* H */
    {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* I */
    {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* J */
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1}, /* K */
    {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* L */
    {1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0}, /* M */
    {1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0}, /* N */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* O */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* P */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0}, /* Q */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1}, /* R */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1}, /* S */
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* T */
    {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* U */
	{1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0}, /* V */
	{1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0}, /* W */
    {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0}, /* X */
	{0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0}, /* Y */
	{0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0}, /* Z */
	{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}  /* BLANK */	};

#elif GERMAN

	int FeatBlock[NLETTERS][NUMBER_OF_FEATURES] = 
	{ {1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,0}, /* A */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0,0}, /* B */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0}, /* C */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,0}, /* D */
   {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,0}, /* E */
    {1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,0}, /* F */
    {1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,0}, /* G */
    {1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,0}, /* H */
    {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,0}, /* I */
    {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0}, /* J */
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1,0}, /* K */
    {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0}, /* L */
    {1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0,0}, /* M */
    {1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0,0}, /* N */
   {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0}, /* O */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,0}, /* P */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0,0}, /* Q */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1,0}, /* R */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1,0}, /* S */
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,0}, /* T */
    {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0}, /* U */
	{1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0,0}, /* V */
	{1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0,0}, /* W */
    {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,0}, /* X */
	{0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,0}, /* Y */
	{0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0,0}, /* Z */
	{1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,1}, /* A */
   {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,1}, /* O */
    {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,1}, /* U */
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0}  /* BLANK */	};
#elif FRENCH
	int FeatBlock[NLETTERS][NUMBER_OF_FEATURES] = 
	{ {1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* A */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0}, /* B */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* C */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* D */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* E */
    {1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* F */
    {1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0}, /* G */
    {1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* H */
    {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* I */
    {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* J */
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1}, /* K */
    {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* L */
    {1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0}, /* M */
    {1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0}, /* N */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* O */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* P */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0}, /* Q */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1}, /* R */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1}, /* S */
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* T */
    {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* U */
	{1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0}, /* V */
	{1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0}, /* W */
    {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0}, /* X */
	{0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0}, /* Y */
	{0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0}, /* Z */
	{0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0}, /* Q */
    {0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1}, /* R */
    {0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1}, /* S */
    {0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* T */
    {0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* U */
	{0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0}, /* V */
	{0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0}, /* W */
    {1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0}, /* X */
	{1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0}, /* Y */
	{1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0}, /* Z */
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  /* BLANK */	};
#elif ITALIAN
	int FeatBlock[NLETTERS][NUMBER_OF_FEATURES] = 
	{ {1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,0}, /* A1 */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0,0}, /* B2 */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0}, /* C3 */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,0}, /* D4 */
   {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,0}, /* E5 */
    {1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,0}, /* F6 */
    {1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,0}, /* G7 */
    {1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,0}, /* H8 */
    {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,0}, /* I9 */
    {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0}, /* J10 */
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1,0}, /* K11 */
    {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0}, /* L12 */
    {1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0,0}, /* M13 */
    {1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0,0}, /* N14 */
   {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0}, /* O15 */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,0}, /* P16 */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0,0}, /* Q17 */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1,0}, /* R18*/
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1,0}, /* S19 */
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,0}, /* T20 */
    {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0}, /* U21 */
	{1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0,0}, /* V22 */
	{1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0,0}, /* W23 */
    {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,0}, /* X24 */
	{0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,0}, /* Y25 */
	{0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0,0}, /* Z26 */
	{1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,1}, /* A27 */
	{1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,1}, /* E28 */
    {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,1}, /* I29 */   
	{1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,1}, /* O30 */
    {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,1}, /* U31 */
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0}  /* BLANK32 */	};
#endif

#if ENGLISH
	int PhFeatBlock[NUMBER_OF_PHONEMES][NPHONEME_FEATURES] =
	{ {1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 0 */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0}, /* 1 */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 2 */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 3 */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* 4 */
    {1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* 5 */
    {1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0}, /* 6 */
    {1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 7 */
    {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 8 */
    {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 9 */
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1}, /* 10 */
    {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 11 */
    {1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0}, /* 12 */
    {1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0}, /* 13 */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 14 */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 15 */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0}, /* 16 */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1}, /* 17 */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1}, /* 18 */
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 19*/
    {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 20 */
	{1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0}, /* 21 */
	{1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0}, /* 22 */
    {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0}, /* 23 */
	{0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0}, /* 24 */
	{0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0}, /* 25 */
	{1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1}, /* 26 */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1}, /* 27 */
    {0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0}, /* 28 */
    {1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0}, /* 29 */
    {1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0}, /* 30 */
    {1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0}, /* 31 */
    {1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1}, /* 32 */
    {0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0}, /* 33 */
    {0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0}, /* 34 */
    {1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1}, /* 35 */
    {0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0}, /* 36 */
    {0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0}, /* 37 */
    {1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0}, /* 38 */
    {0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0}, /* 39 */
    {0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1}, /* 40 */
    {1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1}, /* 41 */
    {1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0}, /* 42 */
   	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  /* BLANK */	};
#elif GERMAN
		int PhFeatBlock[NUMBER_OF_PHONEMES][NPHONEME_FEATURES] =
	{ {1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 0 */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0}, /* 1 */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 2 */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 3 */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* 4 */
    {1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* 5 */
    {1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0}, /* 6 */
    {1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 7 */
    {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 8 */
    {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 9 */
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1}, /* 10 */
    {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 11 */
    {1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0}, /* 12 */
    {1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0}, /* 13 */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 14 */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 15 */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0}, /* 16 */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1}, /* 17 */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1}, /* 18 */
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 19*/
    {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 20 */
	{1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0}, /* 21 */
	{1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0}, /* 22 */
    {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0}, /* 23 */
	{0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0}, /* 24 */
	{0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0}, /* 25 */
	{1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1}, /* 26 */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1}, /* 27 */
    {0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0}, /* 28 */
    {1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0}, /* 29 */
    {1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0}, /* 30 */
    {1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0}, /* 31 */
    {1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1}, /* 32 */
    {0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0}, /* 33 */
    {0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0}, /* 34 */
    {1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1}, /* 35 */
    {0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0}, /* 36 */
    {0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0}, /* 37 */
    {1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0}, /* 38 */
    {0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0}, /* 39 */
    {0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1}, /* 40 */
    {1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1}, /* 41 */
	{1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0}, /* 41 */ /* Just put in */
   	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  /* BLANK */	};
#elif FRENCH
	int PhFeatBlock[NUMBER_OF_PHONEMES][NPHONEME_FEATURES] =
	{ {1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 0 */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0}, /* 1 */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 2 */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 3 */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* 4 */
    {1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* 5 */
    {1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0}, /* 6 */
    {1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 7 */
    {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 8 */
    {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 9 */
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1}, /* 10 */
    {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 11 */
    {1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0}, /* 12 */
    {1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0}, /* 13 */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 14 */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 15 */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0}, /* 16 */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1}, /* 17 */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1}, /* 18 */
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 19*/
    {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 20 */
	{1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0}, /* 21 */
	{1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0}, /* 22 */
    {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0}, /* 23 */
	{0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0}, /* 24 */
	{0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0}, /* 25 */
	{1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1}, /* 26 */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1}, /* 27 */
    {0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0}, /* 28 */
    {1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0}, /* 29 */
    {1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0}, /* 30 */
    {1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0}, /* 31 */
    {1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1}, /* 32 */
    {0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0}, /* 33 */
    {0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0}, /* 34 */
    {1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1}, /* 35 */
    {0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0}, /* 36 */
    {0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0}, /* 37 */
   	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  /* BLANK */	};
#elif ITALIAN
	int PhFeatBlock[NUMBER_OF_PHONEMES][NPHONEME_FEATURES] =
	{ {1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 0 */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0}, /* 1 */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 2 */
    {0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 3 */
    {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* 4 */
    {1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1}, /* 5 */
    {1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0}, /* 6 */
    {1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 7 */
    {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 8 */
    {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 9 */
    {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1}, /* 10 */
    {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 11 */
    {1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0}, /* 12 */
    {1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0}, /* 13 */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 14 */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1}, /* 15 */
    {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0}, /* 16 */
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1}, /* 17 */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1}, /* 18 */
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0}, /* 19*/
    {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, /* 20 */
	{1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0}, /* 21 */
	{1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0}, /* 22 */
    {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0}, /* 23 */
	{0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0}, /* 24 */
	{0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0}, /* 25 */
	{1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1}, /* 26 */
    {1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1}, /* 27 */
    {0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0}, /* 28 */
    {1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0}, /* 29 */
    {1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0}, /* 30 */
    {1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0}, /* 31 */
    {1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1}, /* 32 */
    {0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0}, /* 33 */
   	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  /* BLANK */	};


#endif

	memcpy(LetterBlock, FeatBlock, sizeof(FeatBlock));	
	memcpy(PhonemeBlock, PhFeatBlock, sizeof(PhFeatBlock) );

    
#if ENGLISH
	strcpy(Alphabet, "ABCDEFGHIJKLMNOPQRSTUVWXYZ+");
	//                12345678901234567890123456789012345678901234567       
	strcpy(Phonemes, "HP$@123456789RDEIJNQSTUVZbdfghijklmnprstuvwxz#{_");


 // Alphabet = new String("abcdefghijklmnopqrstuvwxyz");
  //  Phonemes = new String("123456789DEIJNQSTUVZbdfghijklmnprstuvwxz#{_");
   

 	strcpy(VowelPhonemes, "123456789EIUVi#{QuH$@P"); 
	strcpy(RuleFileName,"drc2.rul");
	strcpy(PGCRuleName,"pgc2.rul");
	strcpy(DataFileName,"NewWords.txt");
	strcpy(VOWELS,"aeiouy");
	strcpy(CONSONANTS,"bcdfghjklmnpqrstvwxz");

//	strcpy(DataFileName,"FlorianEng.txt");
//	strcpy(VowelPhonemes, "aAiIaoOe@eEuU^Y"); 
	

#elif GERMAN
	strcpy(Alphabet, "abcdefghijklmnopqrstuvwxyzAOU$+");
  	//strcpy(Phonemes, "Z_#%&)/aBbdEefghIiJjklmNnOoprSstUuvWXxYyz|{P~@+"); /*change = to %  + to P*/
	strcpy(Phonemes, "Z_#%&)/aBbdEefghIiJjklmNnOoprSstUuvWXxYyz|{PQ@+"); /*change = to %  + to P*/

	strcpy(RuleFileName,"rules.fin");
	strcpy(PGCRuleName,"Gpgc2.rul");
	strcpy(DataFileName,"GermanWords.txt");
	strcpy(VOWELS,"aeiouyAOU");
	strcpy(CONSONANTS,"bcdfghjklmnpqrstvwxz");
	strcpy(VowelPhonemes, "@&)/aAEeIiOoUu|WByY{X~");
#elif FRENCH
	strcpy(Alphabet, "a��bc�de���fghi��jklmno�pqrstu�vwxyz+");
	strcpy(Phonemes, "aiyuoOeE02951@A3j8wpbtdkgfvszSZmnNlRxG+");
	strcpy(VowelPhonemes, "Ea����i�Oo��u��y�^@29eA51"); 
	strcpy(RuleFileName,"Frdrc2.rul");
	strcpy(PGCRuleName,"Frpgc2.rul");
	strcpy(DataFileName,"FrLexicon.txt");
	strcpy(VOWELS,"a��e���i��o�u�y");
	strcpy(CONSONANTS,"bc�dfghjklmnpqrstvwxz");
#elif ITALIAN
	//dZ = # tS = %
	strcpy(Alphabet, "abcdefghijklmnopqrstuvwxyzAEIOU+");
    strcpy(Phonemes, "ieEaoOujwptkbdgfsSvzmnZT_JZNF#%lLr#");

	strcpy(RuleFileName,"rules.fin");
	strcpy(PGCRuleName,"Gpgc2.rul");
	strcpy(DataFileName,"GermanWords.txt");
	strcpy(VOWELS,"aeiouAEIOU");
	strcpy(CONSONANTS,"bcdfghjklmnpqrstvwxz");
	strcpy(VowelPhonemes, "aeiouEO");
#endif

	act_rate = 0.2;
	bias_multiplier = 1.0;

	word_log_divisor = 606000000;
	phon_log_divisor = 606000000;

	//	word_log_divisor = 6.068;
	//	phon_log_divisor = 4.783339;

//	strcpy(Alphabet, "abcdefghijklmnopqrstuvwxyzAOU+");
//	strcpy(Phonemes, "_*$#%&)/aBbdEefghIiJjklmNnOoprSstUuvWXYyz|+");
//	strcpy(RuleFileName,"rules.fin");
//	strcpy(PGCRuleName,"pgc2.rul");
//	strcpy(DataFileName,"lexicon.DRC");
//	strcpy(VOWELS,"aeiouyAOU");
//	strcpy(CONSONANTS,"bcdfghjklmnpqrstvwxz");
//	strcpy(VowelPhonemes, "$#%&)/aAEeIiOoUu|");
//	act_rate = 0.2;
//	bias_multiplier = 1.0;
///	word_log_divisor = log10(658014);
//	phon_log_divisor = log10(56034);


}

GlobalC::~GlobalC()
{

}

int GlobalC::IsVowelPhoneme(char test)
{
    int i;

    for(i=0;i<strlen(VowelPhonemes);i++) {
      if(test == VowelPhonemes[i]) return true;
    }
    return false;
  }


int GlobalC::IsVowel(char Letter)
{
	int i;
	for(i=0;i<strlen(VOWELS);i++) if(Letter == VOWELS[i]) return i;
	return -1;
}

int GlobalC::ConsonantNum(char Letter) 
{
	int i;
	for(i=0;i<strlen(CONSONANTS);i++) if(Letter == CONSONANTS[i]) return i;
	return -1;
}

int GlobalC::AlphabetIndex(char Letter)
{
	int i;
	for(i=0;i<NLETTERS;i++) if(Letter == Alphabet[i]) return i;
	return -1;
}

int GlobalC::PhonemeVowelIndex(char Letter)
{
	int i;
	for(i=0;i<strlen(VowelPhonemes);i++) if(Letter == VowelPhonemes[i]) return i;
	return -1;
}

int GlobalC::PhonemeIndex(char Letter)
{
	int i;
	for(i=0;i<strlen(Phonemes);i++) if(Letter == Phonemes[i]) return i;
	return -1;
}

int GlobalC::CheckWord(char *Word)
{
	int test, i;

	for(i=0;i<MAXPOS;i++) {
		test = AlphabetIndex(Word[i]); 
		if(test > NLETTERS || test < -1) return FALSE;
	}
	return TRUE;
}

int GlobalC::NoSpaces(char* Line)
{
	int i, count = 0;

	for(i=0;i<strlen(Line);i++) {
		if(Line[i] == ' ') count++;
	}
	return count;
}



char GlobalC::Language_Hack(char Letter)
{
#if ENGLISH
	return tolower(Letter);
#elif GERMAN
		 return Letter; 
#elif FRENCH
		 return Letter;
#elif ITALIAN
		return Letter;
#endif
}

char GlobalC::Language_Data_Hack(char Letter)
{  
#if ENGLISH
	return toupper(Letter);
#elif GERMAN
		 return Letter; 
#elif FRENCH
		 return Letter;
#elif ITALIAN
		 return Letter;
#endif
}

float GlobalC::VectLength(float *Vect, int length)
{
	int i;
	float sum = 0;

	for(i=0;i<length;i++) {
		sum += (Vect[i] * Vect[i]);
	}
	return(sqrt(sum));
}

float GlobalC::Box_Muller_Polar(float noise){
        float U1=0.0,U2=0.0,W=0.0,T=0.0,X=0.0,Y=0.0;
        int flag=1;
        while(flag){
                U1= ((rand() % 32000) / 16000.0) - 1;
                U2= ((rand() % 32000) / 16000.0) - 1;
                W=((float) pow((float)U1,(float) 2.0) + pow((float)U2,(float) 2.0));
                if(W<=1.0&&W>0.0) flag=0;
        }
        T=pow(((-2.0*log(W))/W),0.5);
        X=U1*T;Y=U2*T;
        return (noise * X);
} 

